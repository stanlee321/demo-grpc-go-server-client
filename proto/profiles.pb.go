// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.0.0
// source: profiles.proto

package Profilepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Profile Political Party
type ProfilePoliticalParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfilePoliticalName        string `protobuf:"bytes,2,opt,name=profilePoliticalName,proto3" json:"profilePoliticalName,omitempty"`
	ProfilePoliticalSigla       string `protobuf:"bytes,3,opt,name=profilePoliticalSigla,proto3" json:"profilePoliticalSigla,omitempty"`
	ProfilePoliticalType        string `protobuf:"bytes,4,opt,name=profilePoliticalType,proto3" json:"profilePoliticalType,omitempty"`
	ProfilePoliticalTwitterId   int32  `protobuf:"varint,5,opt,name=profilePoliticalTwitterId,proto3" json:"profilePoliticalTwitterId,omitempty"`
	ProfilePoliticalFacebookID  int32  `protobuf:"varint,6,opt,name=profilePoliticalFacebookID,proto3" json:"profilePoliticalFacebookID,omitempty"`
	ProfilePoliticalInstagramID int32  `protobuf:"varint,7,opt,name=profilePoliticalInstagramID,proto3" json:"profilePoliticalInstagramID,omitempty"`
	ProfilePoliticalYoutubeID   int32  `protobuf:"varint,8,opt,name=profilePoliticalYoutubeID,proto3" json:"profilePoliticalYoutubeID,omitempty"`
	ProfilePoliticalTikTokID    int32  `protobuf:"varint,9,opt,name=profilePoliticalTikTokID,proto3" json:"profilePoliticalTikTokID,omitempty"`
	CreatedAt                   string `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                   string `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProfilePoliticalParty) Reset() {
	*x = ProfilePoliticalParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePoliticalParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePoliticalParty) ProtoMessage() {}

func (x *ProfilePoliticalParty) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePoliticalParty.ProtoReflect.Descriptor instead.
func (*ProfilePoliticalParty) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{0}
}

func (x *ProfilePoliticalParty) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfilePoliticalParty) GetProfilePoliticalName() string {
	if x != nil {
		return x.ProfilePoliticalName
	}
	return ""
}

func (x *ProfilePoliticalParty) GetProfilePoliticalSigla() string {
	if x != nil {
		return x.ProfilePoliticalSigla
	}
	return ""
}

func (x *ProfilePoliticalParty) GetProfilePoliticalType() string {
	if x != nil {
		return x.ProfilePoliticalType
	}
	return ""
}

func (x *ProfilePoliticalParty) GetProfilePoliticalTwitterId() int32 {
	if x != nil {
		return x.ProfilePoliticalTwitterId
	}
	return 0
}

func (x *ProfilePoliticalParty) GetProfilePoliticalFacebookID() int32 {
	if x != nil {
		return x.ProfilePoliticalFacebookID
	}
	return 0
}

func (x *ProfilePoliticalParty) GetProfilePoliticalInstagramID() int32 {
	if x != nil {
		return x.ProfilePoliticalInstagramID
	}
	return 0
}

func (x *ProfilePoliticalParty) GetProfilePoliticalYoutubeID() int32 {
	if x != nil {
		return x.ProfilePoliticalYoutubeID
	}
	return 0
}

func (x *ProfilePoliticalParty) GetProfilePoliticalTikTokID() int32 {
	if x != nil {
		return x.ProfilePoliticalTikTokID
	}
	return 0
}

func (x *ProfilePoliticalParty) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProfilePoliticalParty) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Profile State Organization
type ProfileStateOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileName          string `protobuf:"bytes,2,opt,name=profileName,proto3" json:"profileName,omitempty"`
	ProfileSigla         string `protobuf:"bytes,3,opt,name=profileSigla,proto3" json:"profileSigla,omitempty"`
	ProfilePoliticalType string `protobuf:"bytes,4,opt,name=profilePoliticalType,proto3" json:"profilePoliticalType,omitempty"`
	ProfileFase          string `protobuf:"bytes,5,opt,name=profileFase,proto3" json:"profileFase,omitempty"`
	ProfileTwitterId     int32  `protobuf:"varint,6,opt,name=profileTwitterId,proto3" json:"profileTwitterId,omitempty"`
	ProfileFacebookId    int32  `protobuf:"varint,7,opt,name=profileFacebookId,proto3" json:"profileFacebookId,omitempty"`
	ProfileInstagramId   int32  `protobuf:"varint,8,opt,name=profileInstagramId,proto3" json:"profileInstagramId,omitempty"`
	ProfileYoutubeId     int32  `protobuf:"varint,9,opt,name=profileYoutubeId,proto3" json:"profileYoutubeId,omitempty"`
	ProfileTikTokId      int32  `protobuf:"varint,10,opt,name=profileTikTokId,proto3" json:"profileTikTokId,omitempty"`
	CreatedAt            string `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            string `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProfileStateOrganization) Reset() {
	*x = ProfileStateOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileStateOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileStateOrganization) ProtoMessage() {}

func (x *ProfileStateOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileStateOrganization.ProtoReflect.Descriptor instead.
func (*ProfileStateOrganization) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileStateOrganization) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfileStateOrganization) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ProfileStateOrganization) GetProfileSigla() string {
	if x != nil {
		return x.ProfileSigla
	}
	return ""
}

func (x *ProfileStateOrganization) GetProfilePoliticalType() string {
	if x != nil {
		return x.ProfilePoliticalType
	}
	return ""
}

func (x *ProfileStateOrganization) GetProfileFase() string {
	if x != nil {
		return x.ProfileFase
	}
	return ""
}

func (x *ProfileStateOrganization) GetProfileTwitterId() int32 {
	if x != nil {
		return x.ProfileTwitterId
	}
	return 0
}

func (x *ProfileStateOrganization) GetProfileFacebookId() int32 {
	if x != nil {
		return x.ProfileFacebookId
	}
	return 0
}

func (x *ProfileStateOrganization) GetProfileInstagramId() int32 {
	if x != nil {
		return x.ProfileInstagramId
	}
	return 0
}

func (x *ProfileStateOrganization) GetProfileYoutubeId() int32 {
	if x != nil {
		return x.ProfileYoutubeId
	}
	return 0
}

func (x *ProfileStateOrganization) GetProfileTikTokId() int32 {
	if x != nil {
		return x.ProfileTikTokId
	}
	return 0
}

func (x *ProfileStateOrganization) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProfileStateOrganization) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Profile People
type ProfilePeople struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileFirstName   string `protobuf:"bytes,2,opt,name=profileFirstName,proto3" json:"profileFirstName,omitempty"`
	ProfileLastName    string `protobuf:"bytes,3,opt,name=profileLastName,proto3" json:"profileLastName,omitempty"`
	ProfileOrientation string `protobuf:"bytes,4,opt,name=profileOrientation,proto3" json:"profileOrientation,omitempty"`
	ProfileKind        string `protobuf:"bytes,5,opt,name=profileKind,proto3" json:"profileKind,omitempty"`
	ProfileTwitterId   int32  `protobuf:"varint,6,opt,name=profileTwitterId,proto3" json:"profileTwitterId,omitempty"`
	ProfileFacebookId  int32  `protobuf:"varint,7,opt,name=profileFacebookId,proto3" json:"profileFacebookId,omitempty"`
	ProfileInstagramId int32  `protobuf:"varint,8,opt,name=profileInstagramId,proto3" json:"profileInstagramId,omitempty"`
	ProfileYoutubeId   int32  `protobuf:"varint,9,opt,name=profileYoutubeId,proto3" json:"profileYoutubeId,omitempty"`
	ProfileTikTokId    int32  `protobuf:"varint,10,opt,name=profileTikTokId,proto3" json:"profileTikTokId,omitempty"`
	CreatedAt          string `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          string `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProfilePeople) Reset() {
	*x = ProfilePeople{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePeople) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePeople) ProtoMessage() {}

func (x *ProfilePeople) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePeople.ProtoReflect.Descriptor instead.
func (*ProfilePeople) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{2}
}

func (x *ProfilePeople) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfilePeople) GetProfileFirstName() string {
	if x != nil {
		return x.ProfileFirstName
	}
	return ""
}

func (x *ProfilePeople) GetProfileLastName() string {
	if x != nil {
		return x.ProfileLastName
	}
	return ""
}

func (x *ProfilePeople) GetProfileOrientation() string {
	if x != nil {
		return x.ProfileOrientation
	}
	return ""
}

func (x *ProfilePeople) GetProfileKind() string {
	if x != nil {
		return x.ProfileKind
	}
	return ""
}

func (x *ProfilePeople) GetProfileTwitterId() int32 {
	if x != nil {
		return x.ProfileTwitterId
	}
	return 0
}

func (x *ProfilePeople) GetProfileFacebookId() int32 {
	if x != nil {
		return x.ProfileFacebookId
	}
	return 0
}

func (x *ProfilePeople) GetProfileInstagramId() int32 {
	if x != nil {
		return x.ProfileInstagramId
	}
	return 0
}

func (x *ProfilePeople) GetProfileYoutubeId() int32 {
	if x != nil {
		return x.ProfileYoutubeId
	}
	return 0
}

func (x *ProfilePeople) GetProfileTikTokId() int32 {
	if x != nil {
		return x.ProfileTikTokId
	}
	return 0
}

func (x *ProfilePeople) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProfilePeople) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Create a new Profile
type CreateProfilePoliticalPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *CreateProfilePoliticalPartyRequest) Reset() {
	*x = CreateProfilePoliticalPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilePoliticalPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilePoliticalPartyRequest) ProtoMessage() {}

func (x *CreateProfilePoliticalPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilePoliticalPartyRequest.ProtoReflect.Descriptor instead.
func (*CreateProfilePoliticalPartyRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProfilePoliticalPartyRequest) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// returns a Profile with new ID field
type CreateProfilePoliticalPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"` // will have a blog id
}

func (x *CreateProfilePoliticalPartyResponse) Reset() {
	*x = CreateProfilePoliticalPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilePoliticalPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilePoliticalPartyResponse) ProtoMessage() {}

func (x *CreateProfilePoliticalPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilePoliticalPartyResponse.ProtoReflect.Descriptor instead.
func (*CreateProfilePoliticalPartyResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{4}
}

func (x *CreateProfilePoliticalPartyResponse) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfilePoliticalPartyByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadProfilePoliticalPartyByIdRequest) Reset() {
	*x = ReadProfilePoliticalPartyByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfilePoliticalPartyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfilePoliticalPartyByIdRequest) ProtoMessage() {}

func (x *ReadProfilePoliticalPartyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfilePoliticalPartyByIdRequest.ProtoReflect.Descriptor instead.
func (*ReadProfilePoliticalPartyByIdRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{5}
}

func (x *ReadProfilePoliticalPartyByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfilePoliticalPartyByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ReadProfilePoliticalPartyByIdResponse) Reset() {
	*x = ReadProfilePoliticalPartyByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfilePoliticalPartyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfilePoliticalPartyByIdResponse) ProtoMessage() {}

func (x *ReadProfilePoliticalPartyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfilePoliticalPartyByIdResponse.ProtoReflect.Descriptor instead.
func (*ReadProfilePoliticalPartyByIdResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{6}
}

func (x *ReadProfilePoliticalPartyByIdResponse) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Update a Profile by a new Profile as input
type UpdateProfilePoliticalPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfilePoliticalPartyRequest) Reset() {
	*x = UpdateProfilePoliticalPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfilePoliticalPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfilePoliticalPartyRequest) ProtoMessage() {}

func (x *UpdateProfilePoliticalPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfilePoliticalPartyRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfilePoliticalPartyRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProfilePoliticalPartyRequest) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Returns the update Profiles
type UpdateProfilePoliticalPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfilePoliticalPartyResponse) Reset() {
	*x = UpdateProfilePoliticalPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfilePoliticalPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfilePoliticalPartyResponse) ProtoMessage() {}

func (x *UpdateProfilePoliticalPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfilePoliticalPartyResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfilePoliticalPartyResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateProfilePoliticalPartyResponse) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

type DeleteProfilePoliticalPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfilePoliticalPartyRequest) Reset() {
	*x = DeleteProfilePoliticalPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfilePoliticalPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePoliticalPartyRequest) ProtoMessage() {}

func (x *DeleteProfilePoliticalPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePoliticalPartyRequest.ProtoReflect.Descriptor instead.
func (*DeleteProfilePoliticalPartyRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteProfilePoliticalPartyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteProfilePoliticalPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfilePoliticalPartyResponse) Reset() {
	*x = DeleteProfilePoliticalPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfilePoliticalPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePoliticalPartyResponse) ProtoMessage() {}

func (x *DeleteProfilePoliticalPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePoliticalPartyResponse.ProtoReflect.Descriptor instead.
func (*DeleteProfilePoliticalPartyResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteProfilePoliticalPartyResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListProfilePoliticalPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Start int32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfilePoliticalPartyRequest) Reset() {
	*x = ListProfilePoliticalPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePoliticalPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePoliticalPartyRequest) ProtoMessage() {}

func (x *ListProfilePoliticalPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePoliticalPartyRequest.ProtoReflect.Descriptor instead.
func (*ListProfilePoliticalPartyRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{11}
}

func (x *ListProfilePoliticalPartyRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfilePoliticalPartyRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfilePoliticalPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfilePoliticalPartyResponse) Reset() {
	*x = ListProfilePoliticalPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePoliticalPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePoliticalPartyResponse) ProtoMessage() {}

func (x *ListProfilePoliticalPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePoliticalPartyResponse.ProtoReflect.Descriptor instead.
func (*ListProfilePoliticalPartyResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{12}
}

func (x *ListProfilePoliticalPartyResponse) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Custom 1
type ListProfilePoliticalPartyByTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileType string `protobuf:"bytes,1,opt,name=profileType,proto3" json:"profileType,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Start       int32  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfilePoliticalPartyByTypeRequest) Reset() {
	*x = ListProfilePoliticalPartyByTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePoliticalPartyByTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePoliticalPartyByTypeRequest) ProtoMessage() {}

func (x *ListProfilePoliticalPartyByTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePoliticalPartyByTypeRequest.ProtoReflect.Descriptor instead.
func (*ListProfilePoliticalPartyByTypeRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{13}
}

func (x *ListProfilePoliticalPartyByTypeRequest) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *ListProfilePoliticalPartyByTypeRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfilePoliticalPartyByTypeRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfilePoliticalPartyByTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePoliticalParty `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfilePoliticalPartyByTypeResponse) Reset() {
	*x = ListProfilePoliticalPartyByTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePoliticalPartyByTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePoliticalPartyByTypeResponse) ProtoMessage() {}

func (x *ListProfilePoliticalPartyByTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePoliticalPartyByTypeResponse.ProtoReflect.Descriptor instead.
func (*ListProfilePoliticalPartyByTypeResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{14}
}

func (x *ListProfilePoliticalPartyByTypeResponse) GetProfile() *ProfilePoliticalParty {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Create a new Profile
type CreateProfileStateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *CreateProfileStateOrganizationRequest) Reset() {
	*x = CreateProfileStateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfileStateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfileStateOrganizationRequest) ProtoMessage() {}

func (x *CreateProfileStateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfileStateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CreateProfileStateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{15}
}

func (x *CreateProfileStateOrganizationRequest) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// returns a Profile with new ID field
type CreateProfileStateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"` // will have a blog id
}

func (x *CreateProfileStateOrganizationResponse) Reset() {
	*x = CreateProfileStateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfileStateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfileStateOrganizationResponse) ProtoMessage() {}

func (x *CreateProfileStateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfileStateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*CreateProfileStateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{16}
}

func (x *CreateProfileStateOrganizationResponse) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfileStateOrganizationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadProfileStateOrganizationByIdRequest) Reset() {
	*x = ReadProfileStateOrganizationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfileStateOrganizationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfileStateOrganizationByIdRequest) ProtoMessage() {}

func (x *ReadProfileStateOrganizationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfileStateOrganizationByIdRequest.ProtoReflect.Descriptor instead.
func (*ReadProfileStateOrganizationByIdRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{17}
}

func (x *ReadProfileStateOrganizationByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfileStateOrganizationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ReadProfileStateOrganizationByIdResponse) Reset() {
	*x = ReadProfileStateOrganizationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfileStateOrganizationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfileStateOrganizationByIdResponse) ProtoMessage() {}

func (x *ReadProfileStateOrganizationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfileStateOrganizationByIdResponse.ProtoReflect.Descriptor instead.
func (*ReadProfileStateOrganizationByIdResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{18}
}

func (x *ReadProfileStateOrganizationByIdResponse) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Update a Profile by a new Profile as input
type UpdateProfileStateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfileStateOrganizationRequest) Reset() {
	*x = UpdateProfileStateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileStateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileStateOrganizationRequest) ProtoMessage() {}

func (x *UpdateProfileStateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileStateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileStateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateProfileStateOrganizationRequest) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Returns the update Profiles
type UpdateProfileStateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfileStateOrganizationResponse) Reset() {
	*x = UpdateProfileStateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileStateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileStateOrganizationResponse) ProtoMessage() {}

func (x *UpdateProfileStateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileStateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfileStateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateProfileStateOrganizationResponse) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

type DeleteProfileStateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfileStateOrganizationRequest) Reset() {
	*x = DeleteProfileStateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfileStateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfileStateOrganizationRequest) ProtoMessage() {}

func (x *DeleteProfileStateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfileStateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*DeleteProfileStateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteProfileStateOrganizationRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteProfileStateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfileStateOrganizationResponse) Reset() {
	*x = DeleteProfileStateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfileStateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfileStateOrganizationResponse) ProtoMessage() {}

func (x *DeleteProfileStateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfileStateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*DeleteProfileStateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteProfileStateOrganizationResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListProfileStateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Start int32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfileStateOrganizationRequest) Reset() {
	*x = ListProfileStateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileStateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileStateOrganizationRequest) ProtoMessage() {}

func (x *ListProfileStateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileStateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*ListProfileStateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{23}
}

func (x *ListProfileStateOrganizationRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfileStateOrganizationRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfileStateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfileStateOrganizationResponse) Reset() {
	*x = ListProfileStateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileStateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileStateOrganizationResponse) ProtoMessage() {}

func (x *ListProfileStateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileStateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*ListProfileStateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{24}
}

func (x *ListProfileStateOrganizationResponse) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Custom 1
type ListProfileStateOrganizationByTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileType string `protobuf:"bytes,1,opt,name=profileType,proto3" json:"profileType,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Start       int32  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfileStateOrganizationByTypeRequest) Reset() {
	*x = ListProfileStateOrganizationByTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileStateOrganizationByTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileStateOrganizationByTypeRequest) ProtoMessage() {}

func (x *ListProfileStateOrganizationByTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileStateOrganizationByTypeRequest.ProtoReflect.Descriptor instead.
func (*ListProfileStateOrganizationByTypeRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{25}
}

func (x *ListProfileStateOrganizationByTypeRequest) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *ListProfileStateOrganizationByTypeRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfileStateOrganizationByTypeRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfileStateOrganizationByTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileStateOrganization `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfileStateOrganizationByTypeResponse) Reset() {
	*x = ListProfileStateOrganizationByTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileStateOrganizationByTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileStateOrganizationByTypeResponse) ProtoMessage() {}

func (x *ListProfileStateOrganizationByTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileStateOrganizationByTypeResponse.ProtoReflect.Descriptor instead.
func (*ListProfileStateOrganizationByTypeResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{26}
}

func (x *ListProfileStateOrganizationByTypeResponse) GetProfile() *ProfileStateOrganization {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Create a new Profile
type CreateProfilePeopleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *CreateProfilePeopleRequest) Reset() {
	*x = CreateProfilePeopleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilePeopleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilePeopleRequest) ProtoMessage() {}

func (x *CreateProfilePeopleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilePeopleRequest.ProtoReflect.Descriptor instead.
func (*CreateProfilePeopleRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{27}
}

func (x *CreateProfilePeopleRequest) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

// returns a Profile with new ID field
type CreateProfilePeopleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"` // will have a blog id
}

func (x *CreateProfilePeopleResponse) Reset() {
	*x = CreateProfilePeopleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilePeopleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilePeopleResponse) ProtoMessage() {}

func (x *CreateProfilePeopleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilePeopleResponse.ProtoReflect.Descriptor instead.
func (*CreateProfilePeopleResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{28}
}

func (x *CreateProfilePeopleResponse) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfilePeopleByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadProfilePeopleByIdRequest) Reset() {
	*x = ReadProfilePeopleByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfilePeopleByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfilePeopleByIdRequest) ProtoMessage() {}

func (x *ReadProfilePeopleByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfilePeopleByIdRequest.ProtoReflect.Descriptor instead.
func (*ReadProfilePeopleByIdRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{29}
}

func (x *ReadProfilePeopleByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Read a Profile bu Profile_id as input (int32)
type ReadProfilePeopleByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ReadProfilePeopleByIdResponse) Reset() {
	*x = ReadProfilePeopleByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadProfilePeopleByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadProfilePeopleByIdResponse) ProtoMessage() {}

func (x *ReadProfilePeopleByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadProfilePeopleByIdResponse.ProtoReflect.Descriptor instead.
func (*ReadProfilePeopleByIdResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{30}
}

func (x *ReadProfilePeopleByIdResponse) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Update a Profile by a new Profile as input
type UpdateProfilePeopleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfilePeopleRequest) Reset() {
	*x = UpdateProfilePeopleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfilePeopleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfilePeopleRequest) ProtoMessage() {}

func (x *UpdateProfilePeopleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfilePeopleRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfilePeopleRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateProfilePeopleRequest) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Returns the update Profiles
type UpdateProfilePeopleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *UpdateProfilePeopleResponse) Reset() {
	*x = UpdateProfilePeopleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfilePeopleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfilePeopleResponse) ProtoMessage() {}

func (x *UpdateProfilePeopleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfilePeopleResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfilePeopleResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateProfilePeopleResponse) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

type DeleteProfilePeopleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfilePeopleRequest) Reset() {
	*x = DeleteProfilePeopleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfilePeopleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePeopleRequest) ProtoMessage() {}

func (x *DeleteProfilePeopleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePeopleRequest.ProtoReflect.Descriptor instead.
func (*DeleteProfilePeopleRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteProfilePeopleRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteProfilePeopleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProfilePeopleResponse) Reset() {
	*x = DeleteProfilePeopleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProfilePeopleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePeopleResponse) ProtoMessage() {}

func (x *DeleteProfilePeopleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePeopleResponse.ProtoReflect.Descriptor instead.
func (*DeleteProfilePeopleResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteProfilePeopleResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListProfilePeopleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Start int32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfilePeopleRequest) Reset() {
	*x = ListProfilePeopleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePeopleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePeopleRequest) ProtoMessage() {}

func (x *ListProfilePeopleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePeopleRequest.ProtoReflect.Descriptor instead.
func (*ListProfilePeopleRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{35}
}

func (x *ListProfilePeopleRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfilePeopleRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfilePeopleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfilePeopleResponse) Reset() {
	*x = ListProfilePeopleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePeopleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePeopleResponse) ProtoMessage() {}

func (x *ListProfilePeopleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePeopleResponse.ProtoReflect.Descriptor instead.
func (*ListProfilePeopleResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{36}
}

func (x *ListProfilePeopleResponse) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Custom 1
type ListProfilePeopleByKindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileKind string `protobuf:"bytes,1,opt,name=profileKind,proto3" json:"profileKind,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Start       int32  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListProfilePeopleByKindRequest) Reset() {
	*x = ListProfilePeopleByKindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePeopleByKindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePeopleByKindRequest) ProtoMessage() {}

func (x *ListProfilePeopleByKindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePeopleByKindRequest.ProtoReflect.Descriptor instead.
func (*ListProfilePeopleByKindRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{37}
}

func (x *ListProfilePeopleByKindRequest) GetProfileKind() string {
	if x != nil {
		return x.ProfileKind
	}
	return ""
}

func (x *ListProfilePeopleByKindRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListProfilePeopleByKindRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ListProfilePeopleByKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfilePeople `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (x *ListProfilePeopleByKindResponse) Reset() {
	*x = ListProfilePeopleByKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfilePeopleByKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfilePeopleByKindResponse) ProtoMessage() {}

func (x *ListProfilePeopleByKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfilePeopleByKindResponse.ProtoReflect.Descriptor instead.
func (*ListProfilePeopleByKindResponse) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{38}
}

func (x *ListProfilePeopleByKindResponse) GetProfile() *ProfilePeople {
	if x != nil {
		return x.Profile
	}
	return nil
}

var File_profiles_proto protoreflect.FileDescriptor

var file_profiles_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbb, 0x04, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6c, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6c, 0x61, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x67, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6c, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x59, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe3, 0x03, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x59, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69,
	0x6b, 0x54, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x5e, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x5f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x36, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x25, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5e,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5f,
	0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x34, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x5d, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x65,
	0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x27, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x67, 0x0a, 0x28, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x65, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x38, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x79, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x69, 0x0a, 0x2a,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x22, 0x4d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x6e, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x22, 0x53, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x80, 0x11, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7e, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x2b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x20, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x30,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x22, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x23, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12,
	0x23, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12,
	0x21, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42,
	0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profiles_proto_rawDescOnce sync.Once
	file_profiles_proto_rawDescData = file_profiles_proto_rawDesc
)

func file_profiles_proto_rawDescGZIP() []byte {
	file_profiles_proto_rawDescOnce.Do(func() {
		file_profiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_profiles_proto_rawDescData)
	})
	return file_profiles_proto_rawDescData
}

var file_profiles_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_profiles_proto_goTypes = []interface{}{
	(*ProfilePoliticalParty)(nil),                      // 0: Profile.ProfilePoliticalParty
	(*ProfileStateOrganization)(nil),                   // 1: Profile.ProfileStateOrganization
	(*ProfilePeople)(nil),                              // 2: Profile.ProfilePeople
	(*CreateProfilePoliticalPartyRequest)(nil),         // 3: Profile.CreateProfilePoliticalPartyRequest
	(*CreateProfilePoliticalPartyResponse)(nil),        // 4: Profile.CreateProfilePoliticalPartyResponse
	(*ReadProfilePoliticalPartyByIdRequest)(nil),       // 5: Profile.ReadProfilePoliticalPartyByIdRequest
	(*ReadProfilePoliticalPartyByIdResponse)(nil),      // 6: Profile.ReadProfilePoliticalPartyByIdResponse
	(*UpdateProfilePoliticalPartyRequest)(nil),         // 7: Profile.UpdateProfilePoliticalPartyRequest
	(*UpdateProfilePoliticalPartyResponse)(nil),        // 8: Profile.UpdateProfilePoliticalPartyResponse
	(*DeleteProfilePoliticalPartyRequest)(nil),         // 9: Profile.DeleteProfilePoliticalPartyRequest
	(*DeleteProfilePoliticalPartyResponse)(nil),        // 10: Profile.DeleteProfilePoliticalPartyResponse
	(*ListProfilePoliticalPartyRequest)(nil),           // 11: Profile.ListProfilePoliticalPartyRequest
	(*ListProfilePoliticalPartyResponse)(nil),          // 12: Profile.ListProfilePoliticalPartyResponse
	(*ListProfilePoliticalPartyByTypeRequest)(nil),     // 13: Profile.ListProfilePoliticalPartyByTypeRequest
	(*ListProfilePoliticalPartyByTypeResponse)(nil),    // 14: Profile.ListProfilePoliticalPartyByTypeResponse
	(*CreateProfileStateOrganizationRequest)(nil),      // 15: Profile.CreateProfileStateOrganizationRequest
	(*CreateProfileStateOrganizationResponse)(nil),     // 16: Profile.CreateProfileStateOrganizationResponse
	(*ReadProfileStateOrganizationByIdRequest)(nil),    // 17: Profile.ReadProfileStateOrganizationByIdRequest
	(*ReadProfileStateOrganizationByIdResponse)(nil),   // 18: Profile.ReadProfileStateOrganizationByIdResponse
	(*UpdateProfileStateOrganizationRequest)(nil),      // 19: Profile.UpdateProfileStateOrganizationRequest
	(*UpdateProfileStateOrganizationResponse)(nil),     // 20: Profile.UpdateProfileStateOrganizationResponse
	(*DeleteProfileStateOrganizationRequest)(nil),      // 21: Profile.DeleteProfileStateOrganizationRequest
	(*DeleteProfileStateOrganizationResponse)(nil),     // 22: Profile.DeleteProfileStateOrganizationResponse
	(*ListProfileStateOrganizationRequest)(nil),        // 23: Profile.ListProfileStateOrganizationRequest
	(*ListProfileStateOrganizationResponse)(nil),       // 24: Profile.ListProfileStateOrganizationResponse
	(*ListProfileStateOrganizationByTypeRequest)(nil),  // 25: Profile.ListProfileStateOrganizationByTypeRequest
	(*ListProfileStateOrganizationByTypeResponse)(nil), // 26: Profile.ListProfileStateOrganizationByTypeResponse
	(*CreateProfilePeopleRequest)(nil),                 // 27: Profile.CreateProfilePeopleRequest
	(*CreateProfilePeopleResponse)(nil),                // 28: Profile.CreateProfilePeopleResponse
	(*ReadProfilePeopleByIdRequest)(nil),               // 29: Profile.ReadProfilePeopleByIdRequest
	(*ReadProfilePeopleByIdResponse)(nil),              // 30: Profile.ReadProfilePeopleByIdResponse
	(*UpdateProfilePeopleRequest)(nil),                 // 31: Profile.UpdateProfilePeopleRequest
	(*UpdateProfilePeopleResponse)(nil),                // 32: Profile.UpdateProfilePeopleResponse
	(*DeleteProfilePeopleRequest)(nil),                 // 33: Profile.DeleteProfilePeopleRequest
	(*DeleteProfilePeopleResponse)(nil),                // 34: Profile.DeleteProfilePeopleResponse
	(*ListProfilePeopleRequest)(nil),                   // 35: Profile.ListProfilePeopleRequest
	(*ListProfilePeopleResponse)(nil),                  // 36: Profile.ListProfilePeopleResponse
	(*ListProfilePeopleByKindRequest)(nil),             // 37: Profile.ListProfilePeopleByKindRequest
	(*ListProfilePeopleByKindResponse)(nil),            // 38: Profile.ListProfilePeopleByKindResponse
}
var file_profiles_proto_depIdxs = []int32{
	0,  // 0: Profile.CreateProfilePoliticalPartyRequest.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 1: Profile.CreateProfilePoliticalPartyResponse.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 2: Profile.ReadProfilePoliticalPartyByIdResponse.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 3: Profile.UpdateProfilePoliticalPartyRequest.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 4: Profile.UpdateProfilePoliticalPartyResponse.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 5: Profile.ListProfilePoliticalPartyResponse.Profile:type_name -> Profile.ProfilePoliticalParty
	0,  // 6: Profile.ListProfilePoliticalPartyByTypeResponse.Profile:type_name -> Profile.ProfilePoliticalParty
	1,  // 7: Profile.CreateProfileStateOrganizationRequest.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 8: Profile.CreateProfileStateOrganizationResponse.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 9: Profile.ReadProfileStateOrganizationByIdResponse.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 10: Profile.UpdateProfileStateOrganizationRequest.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 11: Profile.UpdateProfileStateOrganizationResponse.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 12: Profile.ListProfileStateOrganizationResponse.Profile:type_name -> Profile.ProfileStateOrganization
	1,  // 13: Profile.ListProfileStateOrganizationByTypeResponse.Profile:type_name -> Profile.ProfileStateOrganization
	2,  // 14: Profile.CreateProfilePeopleRequest.Profile:type_name -> Profile.ProfilePeople
	2,  // 15: Profile.CreateProfilePeopleResponse.Profile:type_name -> Profile.ProfilePeople
	2,  // 16: Profile.ReadProfilePeopleByIdResponse.Profile:type_name -> Profile.ProfilePeople
	2,  // 17: Profile.UpdateProfilePeopleRequest.Profile:type_name -> Profile.ProfilePeople
	2,  // 18: Profile.UpdateProfilePeopleResponse.Profile:type_name -> Profile.ProfilePeople
	2,  // 19: Profile.ListProfilePeopleResponse.Profile:type_name -> Profile.ProfilePeople
	2,  // 20: Profile.ListProfilePeopleByKindResponse.Profile:type_name -> Profile.ProfilePeople
	3,  // 21: Profile.ProfileService.CreateProfilePoliticalParty:input_type -> Profile.CreateProfilePoliticalPartyRequest
	5,  // 22: Profile.ProfileService.ReadProfilePoliticalPartyByID:input_type -> Profile.ReadProfilePoliticalPartyByIdRequest
	7,  // 23: Profile.ProfileService.UpdateProfilePoliticalParty:input_type -> Profile.UpdateProfilePoliticalPartyRequest
	9,  // 24: Profile.ProfileService.DeleteProfilePoliticalParty:input_type -> Profile.DeleteProfilePoliticalPartyRequest
	11, // 25: Profile.ProfileService.ListProfilePoliticalParty:input_type -> Profile.ListProfilePoliticalPartyRequest
	13, // 26: Profile.ProfileService.ListProfilePoliticalPartyByType:input_type -> Profile.ListProfilePoliticalPartyByTypeRequest
	15, // 27: Profile.ProfileService.CreateProfileStateOrganization:input_type -> Profile.CreateProfileStateOrganizationRequest
	17, // 28: Profile.ProfileService.ReadProfileStateOrganizationByID:input_type -> Profile.ReadProfileStateOrganizationByIdRequest
	19, // 29: Profile.ProfileService.UpdateProfileStateOrganization:input_type -> Profile.UpdateProfileStateOrganizationRequest
	21, // 30: Profile.ProfileService.DeleteProfileStateOrganization:input_type -> Profile.DeleteProfileStateOrganizationRequest
	23, // 31: Profile.ProfileService.ListProfileStateOrganization:input_type -> Profile.ListProfileStateOrganizationRequest
	25, // 32: Profile.ProfileService.ListProfileStateOrganizationByType:input_type -> Profile.ListProfileStateOrganizationByTypeRequest
	27, // 33: Profile.ProfileService.CreateProfilePeople:input_type -> Profile.CreateProfilePeopleRequest
	29, // 34: Profile.ProfileService.ReadProfilePeopleByID:input_type -> Profile.ReadProfilePeopleByIdRequest
	31, // 35: Profile.ProfileService.UpdateProfilePeople:input_type -> Profile.UpdateProfilePeopleRequest
	33, // 36: Profile.ProfileService.DeleteProfilePeople:input_type -> Profile.DeleteProfilePeopleRequest
	35, // 37: Profile.ProfileService.ListProfilePeople:input_type -> Profile.ListProfilePeopleRequest
	37, // 38: Profile.ProfileService.ListProfilePeopleByKind:input_type -> Profile.ListProfilePeopleByKindRequest
	4,  // 39: Profile.ProfileService.CreateProfilePoliticalParty:output_type -> Profile.CreateProfilePoliticalPartyResponse
	6,  // 40: Profile.ProfileService.ReadProfilePoliticalPartyByID:output_type -> Profile.ReadProfilePoliticalPartyByIdResponse
	8,  // 41: Profile.ProfileService.UpdateProfilePoliticalParty:output_type -> Profile.UpdateProfilePoliticalPartyResponse
	10, // 42: Profile.ProfileService.DeleteProfilePoliticalParty:output_type -> Profile.DeleteProfilePoliticalPartyResponse
	12, // 43: Profile.ProfileService.ListProfilePoliticalParty:output_type -> Profile.ListProfilePoliticalPartyResponse
	14, // 44: Profile.ProfileService.ListProfilePoliticalPartyByType:output_type -> Profile.ListProfilePoliticalPartyByTypeResponse
	16, // 45: Profile.ProfileService.CreateProfileStateOrganization:output_type -> Profile.CreateProfileStateOrganizationResponse
	18, // 46: Profile.ProfileService.ReadProfileStateOrganizationByID:output_type -> Profile.ReadProfileStateOrganizationByIdResponse
	20, // 47: Profile.ProfileService.UpdateProfileStateOrganization:output_type -> Profile.UpdateProfileStateOrganizationResponse
	22, // 48: Profile.ProfileService.DeleteProfileStateOrganization:output_type -> Profile.DeleteProfileStateOrganizationResponse
	24, // 49: Profile.ProfileService.ListProfileStateOrganization:output_type -> Profile.ListProfileStateOrganizationResponse
	26, // 50: Profile.ProfileService.ListProfileStateOrganizationByType:output_type -> Profile.ListProfileStateOrganizationByTypeResponse
	28, // 51: Profile.ProfileService.CreateProfilePeople:output_type -> Profile.CreateProfilePeopleResponse
	30, // 52: Profile.ProfileService.ReadProfilePeopleByID:output_type -> Profile.ReadProfilePeopleByIdResponse
	32, // 53: Profile.ProfileService.UpdateProfilePeople:output_type -> Profile.UpdateProfilePeopleResponse
	34, // 54: Profile.ProfileService.DeleteProfilePeople:output_type -> Profile.DeleteProfilePeopleResponse
	36, // 55: Profile.ProfileService.ListProfilePeople:output_type -> Profile.ListProfilePeopleResponse
	38, // 56: Profile.ProfileService.ListProfilePeopleByKind:output_type -> Profile.ListProfilePeopleByKindResponse
	39, // [39:57] is the sub-list for method output_type
	21, // [21:39] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_profiles_proto_init() }
func file_profiles_proto_init() {
	if File_profiles_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePoliticalParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileStateOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePeople); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfilePoliticalPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfilePoliticalPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfilePoliticalPartyByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfilePoliticalPartyByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfilePoliticalPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfilePoliticalPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfilePoliticalPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfilePoliticalPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePoliticalPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePoliticalPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePoliticalPartyByTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePoliticalPartyByTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfileStateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfileStateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfileStateOrganizationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfileStateOrganizationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileStateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileStateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfileStateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfileStateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileStateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileStateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileStateOrganizationByTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileStateOrganizationByTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfilePeopleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProfilePeopleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfilePeopleByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadProfilePeopleByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfilePeopleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfilePeopleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfilePeopleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProfilePeopleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePeopleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePeopleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePeopleByKindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfilePeopleByKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profiles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profiles_proto_goTypes,
		DependencyIndexes: file_profiles_proto_depIdxs,
		MessageInfos:      file_profiles_proto_msgTypes,
	}.Build()
	File_profiles_proto = out.File
	file_profiles_proto_rawDesc = nil
	file_profiles_proto_goTypes = nil
	file_profiles_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Political Party
	CreateProfilePoliticalParty(ctx context.Context, in *CreateProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*CreateProfilePoliticalPartyResponse, error)
	ReadProfilePoliticalPartyByID(ctx context.Context, in *ReadProfilePoliticalPartyByIdRequest, opts ...grpc.CallOption) (*ReadProfilePoliticalPartyByIdResponse, error)
	UpdateProfilePoliticalParty(ctx context.Context, in *UpdateProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*UpdateProfilePoliticalPartyResponse, error)
	DeleteProfilePoliticalParty(ctx context.Context, in *DeleteProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*DeleteProfilePoliticalPartyResponse, error)
	ListProfilePoliticalParty(ctx context.Context, in *ListProfilePoliticalPartyRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePoliticalPartyClient, error)
	ListProfilePoliticalPartyByType(ctx context.Context, in *ListProfilePoliticalPartyByTypeRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePoliticalPartyByTypeClient, error)
	// ProfileStateOrganization
	CreateProfileStateOrganization(ctx context.Context, in *CreateProfileStateOrganizationRequest, opts ...grpc.CallOption) (*CreateProfileStateOrganizationResponse, error)
	ReadProfileStateOrganizationByID(ctx context.Context, in *ReadProfileStateOrganizationByIdRequest, opts ...grpc.CallOption) (*ReadProfileStateOrganizationByIdResponse, error)
	UpdateProfileStateOrganization(ctx context.Context, in *UpdateProfileStateOrganizationRequest, opts ...grpc.CallOption) (*UpdateProfileStateOrganizationResponse, error)
	DeleteProfileStateOrganization(ctx context.Context, in *DeleteProfileStateOrganizationRequest, opts ...grpc.CallOption) (*DeleteProfileStateOrganizationResponse, error)
	ListProfileStateOrganization(ctx context.Context, in *ListProfileStateOrganizationRequest, opts ...grpc.CallOption) (ProfileService_ListProfileStateOrganizationClient, error)
	ListProfileStateOrganizationByType(ctx context.Context, in *ListProfileStateOrganizationByTypeRequest, opts ...grpc.CallOption) (ProfileService_ListProfileStateOrganizationByTypeClient, error)
	// Profile People
	CreateProfilePeople(ctx context.Context, in *CreateProfilePeopleRequest, opts ...grpc.CallOption) (*CreateProfilePeopleResponse, error)
	ReadProfilePeopleByID(ctx context.Context, in *ReadProfilePeopleByIdRequest, opts ...grpc.CallOption) (*ReadProfilePeopleByIdResponse, error)
	UpdateProfilePeople(ctx context.Context, in *UpdateProfilePeopleRequest, opts ...grpc.CallOption) (*UpdateProfilePeopleResponse, error)
	DeleteProfilePeople(ctx context.Context, in *DeleteProfilePeopleRequest, opts ...grpc.CallOption) (*DeleteProfilePeopleResponse, error)
	ListProfilePeople(ctx context.Context, in *ListProfilePeopleRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePeopleClient, error)
	ListProfilePeopleByKind(ctx context.Context, in *ListProfilePeopleByKindRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePeopleByKindClient, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) CreateProfilePoliticalParty(ctx context.Context, in *CreateProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*CreateProfilePoliticalPartyResponse, error) {
	out := new(CreateProfilePoliticalPartyResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/CreateProfilePoliticalParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ReadProfilePoliticalPartyByID(ctx context.Context, in *ReadProfilePoliticalPartyByIdRequest, opts ...grpc.CallOption) (*ReadProfilePoliticalPartyByIdResponse, error) {
	out := new(ReadProfilePoliticalPartyByIdResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/ReadProfilePoliticalPartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfilePoliticalParty(ctx context.Context, in *UpdateProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*UpdateProfilePoliticalPartyResponse, error) {
	out := new(UpdateProfilePoliticalPartyResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/UpdateProfilePoliticalParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteProfilePoliticalParty(ctx context.Context, in *DeleteProfilePoliticalPartyRequest, opts ...grpc.CallOption) (*DeleteProfilePoliticalPartyResponse, error) {
	out := new(DeleteProfilePoliticalPartyResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/DeleteProfilePoliticalParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListProfilePoliticalParty(ctx context.Context, in *ListProfilePoliticalPartyRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePoliticalPartyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[0], "/Profile.ProfileService/ListProfilePoliticalParty", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfilePoliticalPartyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfilePoliticalPartyClient interface {
	Recv() (*ListProfilePoliticalPartyResponse, error)
	grpc.ClientStream
}

type profileServiceListProfilePoliticalPartyClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfilePoliticalPartyClient) Recv() (*ListProfilePoliticalPartyResponse, error) {
	m := new(ListProfilePoliticalPartyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) ListProfilePoliticalPartyByType(ctx context.Context, in *ListProfilePoliticalPartyByTypeRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePoliticalPartyByTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[1], "/Profile.ProfileService/ListProfilePoliticalPartyByType", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfilePoliticalPartyByTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfilePoliticalPartyByTypeClient interface {
	Recv() (*ListProfilePoliticalPartyByTypeResponse, error)
	grpc.ClientStream
}

type profileServiceListProfilePoliticalPartyByTypeClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfilePoliticalPartyByTypeClient) Recv() (*ListProfilePoliticalPartyByTypeResponse, error) {
	m := new(ListProfilePoliticalPartyByTypeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) CreateProfileStateOrganization(ctx context.Context, in *CreateProfileStateOrganizationRequest, opts ...grpc.CallOption) (*CreateProfileStateOrganizationResponse, error) {
	out := new(CreateProfileStateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/CreateProfileStateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ReadProfileStateOrganizationByID(ctx context.Context, in *ReadProfileStateOrganizationByIdRequest, opts ...grpc.CallOption) (*ReadProfileStateOrganizationByIdResponse, error) {
	out := new(ReadProfileStateOrganizationByIdResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/ReadProfileStateOrganizationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfileStateOrganization(ctx context.Context, in *UpdateProfileStateOrganizationRequest, opts ...grpc.CallOption) (*UpdateProfileStateOrganizationResponse, error) {
	out := new(UpdateProfileStateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/UpdateProfileStateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteProfileStateOrganization(ctx context.Context, in *DeleteProfileStateOrganizationRequest, opts ...grpc.CallOption) (*DeleteProfileStateOrganizationResponse, error) {
	out := new(DeleteProfileStateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/DeleteProfileStateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListProfileStateOrganization(ctx context.Context, in *ListProfileStateOrganizationRequest, opts ...grpc.CallOption) (ProfileService_ListProfileStateOrganizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[2], "/Profile.ProfileService/ListProfileStateOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfileStateOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfileStateOrganizationClient interface {
	Recv() (*ListProfileStateOrganizationResponse, error)
	grpc.ClientStream
}

type profileServiceListProfileStateOrganizationClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfileStateOrganizationClient) Recv() (*ListProfileStateOrganizationResponse, error) {
	m := new(ListProfileStateOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) ListProfileStateOrganizationByType(ctx context.Context, in *ListProfileStateOrganizationByTypeRequest, opts ...grpc.CallOption) (ProfileService_ListProfileStateOrganizationByTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[3], "/Profile.ProfileService/ListProfileStateOrganizationByType", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfileStateOrganizationByTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfileStateOrganizationByTypeClient interface {
	Recv() (*ListProfileStateOrganizationByTypeResponse, error)
	grpc.ClientStream
}

type profileServiceListProfileStateOrganizationByTypeClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfileStateOrganizationByTypeClient) Recv() (*ListProfileStateOrganizationByTypeResponse, error) {
	m := new(ListProfileStateOrganizationByTypeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) CreateProfilePeople(ctx context.Context, in *CreateProfilePeopleRequest, opts ...grpc.CallOption) (*CreateProfilePeopleResponse, error) {
	out := new(CreateProfilePeopleResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/CreateProfilePeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ReadProfilePeopleByID(ctx context.Context, in *ReadProfilePeopleByIdRequest, opts ...grpc.CallOption) (*ReadProfilePeopleByIdResponse, error) {
	out := new(ReadProfilePeopleByIdResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/ReadProfilePeopleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfilePeople(ctx context.Context, in *UpdateProfilePeopleRequest, opts ...grpc.CallOption) (*UpdateProfilePeopleResponse, error) {
	out := new(UpdateProfilePeopleResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/UpdateProfilePeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteProfilePeople(ctx context.Context, in *DeleteProfilePeopleRequest, opts ...grpc.CallOption) (*DeleteProfilePeopleResponse, error) {
	out := new(DeleteProfilePeopleResponse)
	err := c.cc.Invoke(ctx, "/Profile.ProfileService/DeleteProfilePeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListProfilePeople(ctx context.Context, in *ListProfilePeopleRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePeopleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[4], "/Profile.ProfileService/ListProfilePeople", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfilePeopleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfilePeopleClient interface {
	Recv() (*ListProfilePeopleResponse, error)
	grpc.ClientStream
}

type profileServiceListProfilePeopleClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfilePeopleClient) Recv() (*ListProfilePeopleResponse, error) {
	m := new(ListProfilePeopleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) ListProfilePeopleByKind(ctx context.Context, in *ListProfilePeopleByKindRequest, opts ...grpc.CallOption) (ProfileService_ListProfilePeopleByKindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileService_serviceDesc.Streams[5], "/Profile.ProfileService/ListProfilePeopleByKind", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListProfilePeopleByKindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListProfilePeopleByKindClient interface {
	Recv() (*ListProfilePeopleByKindResponse, error)
	grpc.ClientStream
}

type profileServiceListProfilePeopleByKindClient struct {
	grpc.ClientStream
}

func (x *profileServiceListProfilePeopleByKindClient) Recv() (*ListProfilePeopleByKindResponse, error) {
	m := new(ListProfilePeopleByKindResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	// Political Party
	CreateProfilePoliticalParty(context.Context, *CreateProfilePoliticalPartyRequest) (*CreateProfilePoliticalPartyResponse, error)
	ReadProfilePoliticalPartyByID(context.Context, *ReadProfilePoliticalPartyByIdRequest) (*ReadProfilePoliticalPartyByIdResponse, error)
	UpdateProfilePoliticalParty(context.Context, *UpdateProfilePoliticalPartyRequest) (*UpdateProfilePoliticalPartyResponse, error)
	DeleteProfilePoliticalParty(context.Context, *DeleteProfilePoliticalPartyRequest) (*DeleteProfilePoliticalPartyResponse, error)
	ListProfilePoliticalParty(*ListProfilePoliticalPartyRequest, ProfileService_ListProfilePoliticalPartyServer) error
	ListProfilePoliticalPartyByType(*ListProfilePoliticalPartyByTypeRequest, ProfileService_ListProfilePoliticalPartyByTypeServer) error
	// ProfileStateOrganization
	CreateProfileStateOrganization(context.Context, *CreateProfileStateOrganizationRequest) (*CreateProfileStateOrganizationResponse, error)
	ReadProfileStateOrganizationByID(context.Context, *ReadProfileStateOrganizationByIdRequest) (*ReadProfileStateOrganizationByIdResponse, error)
	UpdateProfileStateOrganization(context.Context, *UpdateProfileStateOrganizationRequest) (*UpdateProfileStateOrganizationResponse, error)
	DeleteProfileStateOrganization(context.Context, *DeleteProfileStateOrganizationRequest) (*DeleteProfileStateOrganizationResponse, error)
	ListProfileStateOrganization(*ListProfileStateOrganizationRequest, ProfileService_ListProfileStateOrganizationServer) error
	ListProfileStateOrganizationByType(*ListProfileStateOrganizationByTypeRequest, ProfileService_ListProfileStateOrganizationByTypeServer) error
	// Profile People
	CreateProfilePeople(context.Context, *CreateProfilePeopleRequest) (*CreateProfilePeopleResponse, error)
	ReadProfilePeopleByID(context.Context, *ReadProfilePeopleByIdRequest) (*ReadProfilePeopleByIdResponse, error)
	UpdateProfilePeople(context.Context, *UpdateProfilePeopleRequest) (*UpdateProfilePeopleResponse, error)
	DeleteProfilePeople(context.Context, *DeleteProfilePeopleRequest) (*DeleteProfilePeopleResponse, error)
	ListProfilePeople(*ListProfilePeopleRequest, ProfileService_ListProfilePeopleServer) error
	ListProfilePeopleByKind(*ListProfilePeopleByKindRequest, ProfileService_ListProfilePeopleByKindServer) error
}

// UnimplementedProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) CreateProfilePoliticalParty(context.Context, *CreateProfilePoliticalPartyRequest) (*CreateProfilePoliticalPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfilePoliticalParty not implemented")
}
func (*UnimplementedProfileServiceServer) ReadProfilePoliticalPartyByID(context.Context, *ReadProfilePoliticalPartyByIdRequest) (*ReadProfilePoliticalPartyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProfilePoliticalPartyByID not implemented")
}
func (*UnimplementedProfileServiceServer) UpdateProfilePoliticalParty(context.Context, *UpdateProfilePoliticalPartyRequest) (*UpdateProfilePoliticalPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePoliticalParty not implemented")
}
func (*UnimplementedProfileServiceServer) DeleteProfilePoliticalParty(context.Context, *DeleteProfilePoliticalPartyRequest) (*DeleteProfilePoliticalPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePoliticalParty not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfilePoliticalParty(*ListProfilePoliticalPartyRequest, ProfileService_ListProfilePoliticalPartyServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfilePoliticalParty not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfilePoliticalPartyByType(*ListProfilePoliticalPartyByTypeRequest, ProfileService_ListProfilePoliticalPartyByTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfilePoliticalPartyByType not implemented")
}
func (*UnimplementedProfileServiceServer) CreateProfileStateOrganization(context.Context, *CreateProfileStateOrganizationRequest) (*CreateProfileStateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfileStateOrganization not implemented")
}
func (*UnimplementedProfileServiceServer) ReadProfileStateOrganizationByID(context.Context, *ReadProfileStateOrganizationByIdRequest) (*ReadProfileStateOrganizationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProfileStateOrganizationByID not implemented")
}
func (*UnimplementedProfileServiceServer) UpdateProfileStateOrganization(context.Context, *UpdateProfileStateOrganizationRequest) (*UpdateProfileStateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileStateOrganization not implemented")
}
func (*UnimplementedProfileServiceServer) DeleteProfileStateOrganization(context.Context, *DeleteProfileStateOrganizationRequest) (*DeleteProfileStateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfileStateOrganization not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfileStateOrganization(*ListProfileStateOrganizationRequest, ProfileService_ListProfileStateOrganizationServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfileStateOrganization not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfileStateOrganizationByType(*ListProfileStateOrganizationByTypeRequest, ProfileService_ListProfileStateOrganizationByTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfileStateOrganizationByType not implemented")
}
func (*UnimplementedProfileServiceServer) CreateProfilePeople(context.Context, *CreateProfilePeopleRequest) (*CreateProfilePeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfilePeople not implemented")
}
func (*UnimplementedProfileServiceServer) ReadProfilePeopleByID(context.Context, *ReadProfilePeopleByIdRequest) (*ReadProfilePeopleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProfilePeopleByID not implemented")
}
func (*UnimplementedProfileServiceServer) UpdateProfilePeople(context.Context, *UpdateProfilePeopleRequest) (*UpdateProfilePeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePeople not implemented")
}
func (*UnimplementedProfileServiceServer) DeleteProfilePeople(context.Context, *DeleteProfilePeopleRequest) (*DeleteProfilePeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePeople not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfilePeople(*ListProfilePeopleRequest, ProfileService_ListProfilePeopleServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfilePeople not implemented")
}
func (*UnimplementedProfileServiceServer) ListProfilePeopleByKind(*ListProfilePeopleByKindRequest, ProfileService_ListProfilePeopleByKindServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProfilePeopleByKind not implemented")
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_CreateProfilePoliticalParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfilePoliticalPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfilePoliticalParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/CreateProfilePoliticalParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfilePoliticalParty(ctx, req.(*CreateProfilePoliticalPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ReadProfilePoliticalPartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProfilePoliticalPartyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ReadProfilePoliticalPartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/ReadProfilePoliticalPartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ReadProfilePoliticalPartyByID(ctx, req.(*ReadProfilePoliticalPartyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfilePoliticalParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfilePoliticalPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfilePoliticalParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/UpdateProfilePoliticalParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfilePoliticalParty(ctx, req.(*UpdateProfilePoliticalPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteProfilePoliticalParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfilePoliticalPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteProfilePoliticalParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/DeleteProfilePoliticalParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteProfilePoliticalParty(ctx, req.(*DeleteProfilePoliticalPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListProfilePoliticalParty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfilePoliticalPartyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfilePoliticalParty(m, &profileServiceListProfilePoliticalPartyServer{stream})
}

type ProfileService_ListProfilePoliticalPartyServer interface {
	Send(*ListProfilePoliticalPartyResponse) error
	grpc.ServerStream
}

type profileServiceListProfilePoliticalPartyServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfilePoliticalPartyServer) Send(m *ListProfilePoliticalPartyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_ListProfilePoliticalPartyByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfilePoliticalPartyByTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfilePoliticalPartyByType(m, &profileServiceListProfilePoliticalPartyByTypeServer{stream})
}

type ProfileService_ListProfilePoliticalPartyByTypeServer interface {
	Send(*ListProfilePoliticalPartyByTypeResponse) error
	grpc.ServerStream
}

type profileServiceListProfilePoliticalPartyByTypeServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfilePoliticalPartyByTypeServer) Send(m *ListProfilePoliticalPartyByTypeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_CreateProfileStateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileStateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfileStateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/CreateProfileStateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfileStateOrganization(ctx, req.(*CreateProfileStateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ReadProfileStateOrganizationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProfileStateOrganizationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ReadProfileStateOrganizationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/ReadProfileStateOrganizationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ReadProfileStateOrganizationByID(ctx, req.(*ReadProfileStateOrganizationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfileStateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileStateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfileStateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/UpdateProfileStateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfileStateOrganization(ctx, req.(*UpdateProfileStateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteProfileStateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileStateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteProfileStateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/DeleteProfileStateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteProfileStateOrganization(ctx, req.(*DeleteProfileStateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListProfileStateOrganization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfileStateOrganizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfileStateOrganization(m, &profileServiceListProfileStateOrganizationServer{stream})
}

type ProfileService_ListProfileStateOrganizationServer interface {
	Send(*ListProfileStateOrganizationResponse) error
	grpc.ServerStream
}

type profileServiceListProfileStateOrganizationServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfileStateOrganizationServer) Send(m *ListProfileStateOrganizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_ListProfileStateOrganizationByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfileStateOrganizationByTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfileStateOrganizationByType(m, &profileServiceListProfileStateOrganizationByTypeServer{stream})
}

type ProfileService_ListProfileStateOrganizationByTypeServer interface {
	Send(*ListProfileStateOrganizationByTypeResponse) error
	grpc.ServerStream
}

type profileServiceListProfileStateOrganizationByTypeServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfileStateOrganizationByTypeServer) Send(m *ListProfileStateOrganizationByTypeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_CreateProfilePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfilePeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfilePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/CreateProfilePeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfilePeople(ctx, req.(*CreateProfilePeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ReadProfilePeopleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProfilePeopleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ReadProfilePeopleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/ReadProfilePeopleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ReadProfilePeopleByID(ctx, req.(*ReadProfilePeopleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfilePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfilePeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfilePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/UpdateProfilePeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfilePeople(ctx, req.(*UpdateProfilePeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteProfilePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfilePeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteProfilePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Profile.ProfileService/DeleteProfilePeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteProfilePeople(ctx, req.(*DeleteProfilePeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListProfilePeople_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfilePeopleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfilePeople(m, &profileServiceListProfilePeopleServer{stream})
}

type ProfileService_ListProfilePeopleServer interface {
	Send(*ListProfilePeopleResponse) error
	grpc.ServerStream
}

type profileServiceListProfilePeopleServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfilePeopleServer) Send(m *ListProfilePeopleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_ListProfilePeopleByKind_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProfilePeopleByKindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).ListProfilePeopleByKind(m, &profileServiceListProfilePeopleByKindServer{stream})
}

type ProfileService_ListProfilePeopleByKindServer interface {
	Send(*ListProfilePeopleByKindResponse) error
	grpc.ServerStream
}

type profileServiceListProfilePeopleByKindServer struct {
	grpc.ServerStream
}

func (x *profileServiceListProfilePeopleByKindServer) Send(m *ListProfilePeopleByKindResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfilePoliticalParty",
			Handler:    _ProfileService_CreateProfilePoliticalParty_Handler,
		},
		{
			MethodName: "ReadProfilePoliticalPartyByID",
			Handler:    _ProfileService_ReadProfilePoliticalPartyByID_Handler,
		},
		{
			MethodName: "UpdateProfilePoliticalParty",
			Handler:    _ProfileService_UpdateProfilePoliticalParty_Handler,
		},
		{
			MethodName: "DeleteProfilePoliticalParty",
			Handler:    _ProfileService_DeleteProfilePoliticalParty_Handler,
		},
		{
			MethodName: "CreateProfileStateOrganization",
			Handler:    _ProfileService_CreateProfileStateOrganization_Handler,
		},
		{
			MethodName: "ReadProfileStateOrganizationByID",
			Handler:    _ProfileService_ReadProfileStateOrganizationByID_Handler,
		},
		{
			MethodName: "UpdateProfileStateOrganization",
			Handler:    _ProfileService_UpdateProfileStateOrganization_Handler,
		},
		{
			MethodName: "DeleteProfileStateOrganization",
			Handler:    _ProfileService_DeleteProfileStateOrganization_Handler,
		},
		{
			MethodName: "CreateProfilePeople",
			Handler:    _ProfileService_CreateProfilePeople_Handler,
		},
		{
			MethodName: "ReadProfilePeopleByID",
			Handler:    _ProfileService_ReadProfilePeopleByID_Handler,
		},
		{
			MethodName: "UpdateProfilePeople",
			Handler:    _ProfileService_UpdateProfilePeople_Handler,
		},
		{
			MethodName: "DeleteProfilePeople",
			Handler:    _ProfileService_DeleteProfilePeople_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProfilePoliticalParty",
			Handler:       _ProfileService_ListProfilePoliticalParty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProfilePoliticalPartyByType",
			Handler:       _ProfileService_ListProfilePoliticalPartyByType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProfileStateOrganization",
			Handler:       _ProfileService_ListProfileStateOrganization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProfileStateOrganizationByType",
			Handler:       _ProfileService_ListProfileStateOrganizationByType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProfilePeople",
			Handler:       _ProfileService_ListProfilePeople_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProfilePeopleByKind",
			Handler:       _ProfileService_ListProfilePeopleByKind_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profiles.proto",
}
